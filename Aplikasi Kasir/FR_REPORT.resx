<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="PEWAKTU.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABx2AAAcdgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4wAFRQOQBVTSwIVU0sCFRQOQBVTjAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFRNMgBWTCwAVU0tBVVMLAtVTi8CVU4vAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBVRg8AVU4vSlVPM7lVTzO5VU4vSlVG
        DwBVTjEAAAAAAAAAAAAAAAAAAAAAAAAAAABVTjEAVU4xAFVOMCNVTjGfVU81xVVOMHdVTjIKVU4xAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFVMKxtUUTzUTGya/0xs
        mv9UUTzUVUwrG1VOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBWTCoBVU4wl09hdf9KcrH/UlhT91VM
        LFFVTjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVTjEAVkwpK1NU
        R+pHfdX/R33V/1NUR+pWTCkrVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFVNLQZVTjK1S2+k/0SE
        8P9QYG//VkwqbFVOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVO
        MQBVTS4JVU8znVFaXPpRWlz6VU8znVVNLglVTjEAAAAAAAAAAAAAAAAAAAAAAAAAAABVTjEAVU4xAFVN
        L2BTVUvuUF1n/lRRPNBVTS4qVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVN
        MQBVTjEAVU4xFVVOMS9VTjFCVU0shVVNLIVVTjFCVU4xL1VOMTBVTjEwVU4xMFVOMTBVTjEwVU4xMFVO
        MTBVTjEwVU4xNVVNLnBVTCyQVU4vWFVOMS9VTjEvVU4xE1VOMQBVTTEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVU0wAFVOMQBVTjFgVU4xylVOMchVTjHEVU4xxFVOMchVTjHJVU4xyVVOMclVTjHJVU4xyVVO
        MclVTjHJVU4xyVVOMchVTjHHVU4xw1VOMcFVTjHDVU4xxFVOMdpVTjGDVU4xAFVNMAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABUTTAAVU4xAFVOMQtVTjEbVU4xG1VOMRtVTjEbVU4xGlVOMRpVTjEZVU4xGFVO
        MRdVTjEXVU4xGFVOMRpVTjEeVE0wJVNMLi5SSy07UUosSlBJK1xQSStvU0wvwFVOMZhVTzIAVU0wAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPSCoAT0cpAVBJKgZQSCoOT0cpGk5H
        KSlORyg6T0cpTk9IKmRQSSt7UkstklVOMKlYUTW9XFY6z2JcQt9pY0rrcWtU9Ht2YftvaVL/VU4xoFFJ
        LABVTjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFZOMhJTTC5bUEkrd1JLLY5UTTClV1A0ultU
        OcxgWkDcZ2FI6m9pUfR3cl37gX1p/4yId/+YlIb/o6CV/66so/+5t7D/wsG8/8rJxv/Qz87/19fW/6ek
        mf9WTzKyUkstBVVOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVTjEAU0suUWRdQ/qJhHP/lZGC/6Cd
        kf+sqZ//trSt/8C+uf/Ix8P/z87M/9PT0v/X19f/2dnZ/9ra2v/a2tv/2trb/9ra2v/Z2dr/2dnZ/9jZ
        2f/a2tv/sa+n/1lSNsRRSiwLVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBQSCpshH9t/9jY
        2P/a2tr/2trb/9ra2//a2tr/2dra/9nZ2f/Z2dn/2NjY/9jY2P/Y2Nj/2NjY/9jY2P/Y2Nj/2NjY/9jY
        2P/Y2Nj/2NjY/9ra2v+6ubL/XVc701BIKhRVTjEAAAAAAAAAAAAAAAAAAAAAAAAAAABUTTAAVU4xAFFK
        LIWQjHz/2dna/9jY2P/Y2Nj/2NjY/9jY2P/Y2Nj/2NjY/9nZ2v/a2tv/2dnZ/9nZ2f/a2tv/2dna/9jY
        2P/Y2Nj/2NjY/9jY2P/Y2Nj/2dna/8LBvP9iXELhT0gpIFVOMQAAAAAAAAAAAAAAAAAAAAAAAAAAAFVO
        MQBGPh8AU0wvnp2ZjP/a2tv/2NjY/9jY2P/Y2Nj/2NjY/9nZ2f/W1tb/v724/5+aj/+OiXn/j4p7/6Oe
        k//Dwb3/2NjY/9nZ2f/Y2Nj/2NjY/9jY2P/Z2dn/ycjF/2hiSexPRyktVU4xAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVU4xAFJKLQZWTzO1qaac/9ra2//Y2Nj/2NjY/9jY2P/Z2dn/zMvJ/46Jev9iZkP/Wng//1uK
        Rf9biUT/WnU//2VnR/+Xk4X/0dDP/9nZ2f/Y2Nj/2NjY/9nZ2f/Pzsz/b2lS9E5HKT1VTjEAAAAAAAAA
        AAAAAAAAAAAAAAAAAABVTjEAUEkrD1pUOMq1s6v/2trb/9jY2P/Y2Nj/2dnZ/83Myv9+eWX/WXU+/2Kz
        Vf9my17/Zs5f/2bNX/9myV3/Ya1S/1luPf+JhHP/0tLR/9jZ2f/Y2Nj/2NjY/9PT0v93clz7T0cpT1VO
        MQAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBPSCobYFo/3L++uP/a2tr/2NjY/9jY2P/Y2Nj/k4+A/1lz
        Pf9kwVr/Zs5f/2O3V/9dikf/ZLxZ/2bMXv9mzV//Y7tY/1prPf+hnZL/2dnZ/9jY2P/Y2Nj/1tbW/4B7
        Z/9PSCpiVU4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAE9HKStnYUjqyMfE/9nZ2f/Y2Nj/2dnZ/8XE
        wP9mZ0j/Ya5T/2bNX/9iq1L/WWo7/1dZNf9ej0n/Zsxe/2bLXv9mzV//X6FN/29tU//Ozcv/2dnZ/9jY
        2P/Y2Nn/iYVz/1BJK3ZVTjEAVU0wAAAAAAAAAAAAAAAAAAAAAABVTjEAT0cpP29pUvXNzMr/19bW/9bV
        1f/Y19j/qqWc/1txP/9lyF3/YaVR/1hkOf9flUr/YKFP/1lpO/9kvln/Zsxe/2bMXv9kwVr/XmpA/7ez
        rf/Y19f/1tXV/9jX1/+Sjn//UkstkVVOMQBVTjEAAAAAAAAAAAAAAAAAAAAAAFVOMQBTTC9OX1g9+Xt2
        Yf59eGP+fXhj/n55ZP5rZE3+W35C/2bMXv9irVP/YadR/2bLXv9lxlz/WnE+/1+VS/9mzV//Zste/2bI
        Xf9acj7/cGlS/n55ZP59eGP+fnlk/mpkS/9UTTCuVU4xBFVOMQAAAAAAAAAAAAAAAAAAAAAAVU4xAFVO
        MRdUTS9WT0gpW09IKVtPSClbT0gpWFJILZ1be0H/Zspe/2bMX/9mzF//Zste/2bNX/9gnk7/WWw8/2XB
        W/9mzF7/ZcZc/1luPftSSCyLT0gpWE9IKVtPSClYU0wuilVOMb9VTjEMVU4xAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVTjEAVEkvRFhnOvVlwVr/Zsxe/2bLXv9my17/Zsxe/2XD
        W/9ZbTz/YJtN/2bOX/9juFf/V1436VRJLy1VTjEAAAAAAFVOMQBVTjE0VU4x3FVOMaFVTjGZVU4xm1VO
        MVlcVTgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVOMQBVSzASVVEyxF+aTP9mzV//Zste/2bL
        Xv9my17/Zs1f/1+ZTP9cfkL/Zspe/16NSP9VTjGsVUwwCFVOMQAAAAAAVU4xAFVOMQ1VTjFmVU4xfVVO
        MXxVTjF+VU4xSFVQMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFVNMQBVSzBTV1838GGq
        Uv9mzF//Zsxe/2bMXv9mzF7/Zcdd/2S8WP9gn07/Vlg15FVLMDxVTjEAVU0xAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVU4xAFVQ
        MgRVSzBsV1w27F6OSP9jtVb/ZcJb/2XBWv9jslX/XYdG/1ZXNOJVSzBWVFw2AFVOMQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVU4xAFZQMgNUSzBCVU4xqldbNeNYZjnzWGU58lZYNd5VTTCeVUswNFdWMwFVTjEAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVU4xAFRKMABVTDAHVEkvI1RILzpUSC84VEkvH1VMMARVTDAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////5/8f/8P+D/+B/A//gfwP/4H+D/8AAAP/AAAD/wAAA//gAAP+AA
        AB/gAAAf4AAAH+AAAB/gAAAfwAAAH8AAAB/AAAAfwAAAH8AAAB/AAAAPwAAAD/8AA4H/AAOB/4AH//+A
        D///wA////A///////////////////////8=
</value>
  </data>
</root>